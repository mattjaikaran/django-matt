"""
Test Projects settings.

Generated by Django Matt config management command.
"""

import os
from pathlib import Path

# Import the Django Matt configuration system
from django_matt.config import configure

# Build paths inside the project
BASE_DIR = Path(__file__).resolve().parent.parent

# Determine the environment
ENVIRONMENT = os.environ.get("DJANGO_ENV", "development")

# Configure the application
settings = configure(
    # Specify the environment (development, staging, production)
    environment=ENVIRONMENT,
    
    # Specify the components to load
    components=['database', 'cache', 'security', 'performance'],
    
    # Specify additional settings
    extra_settings={
        # Project-specific settings
        "ROOT_URLCONF": "test_projects.urls",
        "WSGI_APPLICATION": "test_projects.wsgi.application",
        
        # Add your project's apps
        "INSTALLED_APPS": [
            # Django Matt apps
            "django_matt",
            
            # Your project's apps
            "test_projects.core",
        ],
        
        # Add your project's middleware
        "MIDDLEWARE": [
            # Django Matt middleware
            "django_matt.middleware.BenchmarkMiddleware",
        ],
        
        # Add your project's templates
        "TEMPLATES": [
            {
                "DIRS": [
                    os.path.join(BASE_DIR, "test_projects", "templates"),
                ],
            },
        ],
        
        # Add your project's static files
        "STATICFILES_DIRS": [
            os.path.join(BASE_DIR, "test_projects", "static"),
        ],
        
        # Add your project's media files
        "MEDIA_ROOT": os.path.join(BASE_DIR, "test_projects", "media"),
        
        # Database type
        "DB_TYPE": "postgres",
    },
    
    # Apply the settings to Django's settings module
    apply_to_django=True,
)

# You can access the settings directly if needed
DEBUG = settings["DEBUG"]
SECRET_KEY = settings["SECRET_KEY"]

# You can also add additional settings after configuration
SOME_CUSTOM_SETTING = "custom value"

# For demonstration purposes, print the environment
if DEBUG:
    print(f"Running in {ENVIRONMENT} environment")
